{"version":3,"sources":["components/MovieItem.js","App.js","serviceWorker.js","index.js"],"names":["MovieItem","props","data","react_default","a","createElement","className","Title","Year","src","Poster","alt","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","txt","search","updateSearch","bind","assertThisInitialized","getData","e","setState","target","value","_this2","url","concat","fetch","then","response","json","Search","catch","error","console","log","htmlFor","type","name","id","onChange","onClick","map","movie","components_MovieItem","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gOAceA,MAZf,SAAmBC,GAAO,IACdC,EAASD,EAATC,KAER,OACIC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBACVH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASJ,EAAKK,OAC5BJ,EAAAC,EAAAC,cAAA,SAAIH,EAAKM,MACTL,EAAAC,EAAAC,cAAA,OAAKI,IAAKP,EAAKQ,OAAQC,IAAI,OCkDxBC,qBAtDX,SAAAA,EAAYX,GAAO,IAAAY,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMf,KACDmB,MAAQ,CACTC,IAAK,eACLC,OAAQ,IAEZT,EAAKU,aAAeV,EAAKU,aAAaC,KAAlBV,OAAAW,EAAA,EAAAX,CAAAD,IACpBA,EAAKa,QAAUb,EAAKa,QAAQF,KAAbV,OAAAW,EAAA,EAAAX,CAAAD,IAPAA,4EASNc,GACTX,KAAKY,SAAS,CAAEP,IAAKM,EAAEE,OAAOC,0CAExB,IAAAC,EAAAf,KACEK,EAAQL,KAAKI,MAAbC,IACFW,EAAG,8BAAAC,OAAiCZ,EAAjC,oBAETa,MAAMF,GACDG,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAjC,GACF6B,EAAKH,SAAS,CAAEN,OAAQpB,EAAKoC,WAGhCC,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAR,iCAAAT,OAA0CO,uCAEzD,IACGlB,EAAWN,KAAKI,MAAhBE,OAER,OACInB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,SAAOsC,QAAQ,QAAQrC,UAAU,eAAjC,yBAGAH,EAAAC,EAAAC,cAAA,SACIuC,KAAK,OACLC,KAAK,QACLC,GAAG,QACHC,SAAU/B,KAAKO,eAEnBpB,EAAAC,EAAAC,cAAA,UAAQ2C,QAAShC,KAAKU,SAAtB,UAEAvB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,gBAAmCU,KAAKI,MAAMC,KAE9ClB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACTgB,EAAO2B,IAAI,SAAAC,GACR,OACI/C,EAAAC,EAAAC,cAAC8C,EAAD,CAAWjD,KAAMgD,eA9C3BE,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.481e5990.chunk.js","sourcesContent":["import React from 'react';\n\nfunction MovieItem(props) {\n    const { data } = props;\n    \n    return (\n        <li className=\"movie-list__item\">\n            <h1 className=\"title\">{data.Title}</h1>\n            <p>{data.Year}</p>\n            <img src={data.Poster} alt=\"\" />\n        </li>\n    );\n}\n\nexport default MovieItem;\n","import React from 'react';\nimport MovieItem from './components/MovieItem';\nimport './App.css';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            txt: 'nombre serie',\n            search: []\n        };\n        this.updateSearch = this.updateSearch.bind(this);\n        this.getData = this.getData.bind(this);\n    }\n    updateSearch(e) {\n        this.setState({ txt: e.target.value });\n    }\n    getData() {\n        const { txt } = this.state;\n        const url = `https://www.omdbapi.com/?s=${txt}&apikey=a24c6d7a`;\n\n        fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                this.setState({ search: data.Search });\n                // console.log('search',this.state.search);\n            })\n            .catch(error => console.log(`Te has equivocado por aquí ${error}`));\n    }\n    render() {\n        const { search } = this.state;\n\n        return (\n            <div className=\"App\">\n                <label htmlFor=\"movie\" className=\"movie-label\">\n                    Busca una película\n                </label>\n                <input\n                    type=\"text\"\n                    name=\"movie\"\n                    id=\"movie\"\n                    onChange={this.updateSearch}\n                />\n                <button onClick={this.getData}>Buscar</button>\n\n                <p className=\"serie\">Has buscado: {this.state.txt}</p>\n\n                <ul className=\"movie-list\">\n                    {search.map(movie => {\n                        return (\n                            <MovieItem data={movie}/>\n                        );\n                    })}\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}